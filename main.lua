--[[
	Config generator by Mr0maks and ProfessorBrain for GG Project servers
	You are free to use it with this License: https://www.gnu.org/licenses/gpl-3.0.en.html
]]

local http = require('http')
local json = require('json')

local temp = io.open("config.json", "r")
local config = json.decode(temp:read("*a"))
temp:close()

local postdata_backup = {
	['token'] = config.backend.token,
	['account_type'] = "steam64id",
}

local options_backup = {
	host = config.backend.host,
	port = config.backend.port,
	path = '/api/privilege/get_with_link',
	method = 'POST',
	headers = {
		['Content-Type'] = 'application/json',
	}
}

for _, server in pairs(config.servers) do
        if server.disabled == 1 then return end
	local postdata = postdata_backup
	postdata.server = server.name
	postdata = json.encode(postdata)

	local options = options_backup
	options["headers"]["Content-Length"] = #postdata

	local req = http.request(options, function(res)
		local buffer = {}
		local string_buffer = nil
--		p("on_connect", {statusCode = res.statusCode, headers = res.headers})
		res:on('data', function (chunk)
--			p("on_data", {chunk=chunk, len = #chunk})
			table.insert( buffer, chunk )
		end)
		res:on("end", function ()
--			p(buffer)
			string_buffer = table.concat( buffer )
--			p(string_buffer)

			local result = json.decode(string_buffer)['data']
			p(result)

			local privileges = {}
			local reserved_slots = {}

			table.insert(privileges, os.date("#GENERATE DATE: %x at %X MSK\n#THIS CONFIG IS AUTOGENERATED! DONT MODIFY IT!\n#CONFIG GENERATOR AUTHORS - Mr0maks, ProfessorBrain\nMembers:\n"))
			table.insert(reserved_slots, os.date("#GENERATE DATE: %x at %X MSK\n#THIS CONFIG IS AUTOGENERATED! DONT MODIFY IT!\n#CONFIG GENERATOR AUTHOR - ProfessorBrain\n"))

			local got_priority_roles = {}
			for i=1, #result do
				for k, v in pairs(server.priority_roles) do
					if result[i].privilege == v then
						if result[i].account == nil then
							table.insert(privileges, string.format('#%s\n - %s@discord: %s\n', result[i].userid, result[i].userid, result[i].privilege))
						else
							table.insert(privileges, string.format('#%s\n - %s@steam: %s\n', result[i].userid, result[i].account, result[i].privilege))
							table.insert(privileges, string.format('#%s\n - %s@discord: %s\n', result[i].userid, result[i].userid, result[i].privilege))
						end
						got_priority_roles[result[i].userid] = true
					end
				end
			end
			for i=1, #result do
				if got_priority_roles[result[i].userid] ~= true and result[i].privilege ~= 'reserved_slot' then
					if result[i].account == nil then
						table.insert(privileges, string.format('#%s\n - %s@discord: %s\n', result[i].userid, result[i].userid, result[i].privilege))
					else
						table.insert(privileges, string.format('#%s\n - %s@steam: %s\n', result[i].userid, result[i].account, result[i].privilege))
						table.insert(privileges, string.format('#%s\n - %s@discord: %s\n', result[i].userid, result[i].userid, result[i].privilege))
					end
				end
				if result[i].privilege == 'reserved_slot' then
					if result[i].account == nil then
	                                        table.insert(reserved_slots, string.format('#%s\n%s@discord\n', result[i].userid, result[i].userid))
	                                else
	                                        table.insert(reserved_slots, string.format('#%s\n%s@steam\n', result[i].userid, result[i].account))
						table.insert(reserved_slots, string.format('#%s\n%s@discord\n', result[i].userid, result[i].userid))
	                                end
				end
			end

			local config_path = "config/"..server.endport.."/"

			local admin_config = io.open(config_path.."config_remoteadmin.txt", "w")
			admin_config:write(table.concat(privileges)):write('\n')
			local admin_config_settings = io.open(server.endport.."-admin_config_settings.txt", "r")
			admin_config:write(admin_config_settings:read("*a")):close()
			admin_config_settings:close()
			io.open(config_path.."UserIDReservedSlots.txt", "w"):write(table.concat(reserved_slots)):close()
		end)
	end)
	req:done(postdata)
--	p(req)
end
